 <application
        android:allowBackup="false"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme"
        tools:ignore="GoogleAppIndexingWarning">
        <activity android:name=".VisualizerActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".SettingsActivity"
            android:parentActivityName=".VisualizerActivity"
            android:label="@string/settings">
            <meta-data android:name="android.support.PARENT_ACTIVITY"
                android:value=".VisualizerActivity" />
        </activity>
    </application>
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.visualizer_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if(item.getItemId() == R.id.action_settings){
            Intent intent = new Intent(this, SettingsActivity.class);
            startActivity(intent);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
---------------------------------------------------------------------------------

        ActionBar action = this.getSupportActionBar();
        if(action != null){
            action.setDisplayHomeAsUpEnabled(true);
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if(item.getItemId() == R.id.home){
            NavUtils.navigateUpFromSameTask(this);
        }
        return super.onOptionsItemSelected(item);
    }
    
---------------------------------------------------------------------------------------
 SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        mVisualizerView.setShowBass(sharedPreferences.getBoolean(getString(R.string.pref_show_bass_key),
                getResources().getBoolean(R.bool.pref_show_bass_default)));
                
-----------------------------------------------------------------------------------------------

public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        Preference preference = findPreference(key);
        if (null != preference) {
            if (!(preference instanceof CheckBoxPreference)) {
                setPreferenceSummary(preference, sharedPreferences.getString(key, ""));
            }
        }
    }
    
public static String getPreferredWeatherLocation(Context context) {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
        String key = context.getString(R.string.pref_location_key);
        String location = context.getString(R.string.pref_location_default);
        return preferences.getString(key, location);
-------------------------------------------------------------------------------------------------------
PreferenceManager.getDefaultSharedPreferences(this)
                .registerOnSharedPreferenceChangeListener(this);
                
--------------------------------------------------------------------------------------------------------
public class WordFetchTask extends AsyncTask<Void, Void, Cursor> {
        @Override
        protected Cursor doInBackground(Void... voids) {
            ContentResolver resolver = getContentResolver();
            Cursor cursor = resolver.query(DroidTermsExampleContract.CONTENT_URI,
                    null, null, null, null);
            return cursor;
        }

        @Override
        protected void onPostExecute(Cursor cursor) {
            super.onPostExecute(cursor);
            mdata = cursor;
        }
        // TODO (1) Create AsyncTask with the following generic types <Void, Void, Cursor>
        // TODO (2) In the doInBackground method, write the code to access the DroidTermsExample
        // provider and return the Cursor object
        // TODO (4) In the onPostExecute method, store the Cursor object in mData
    }

--------------------------------------------------------------------------------------------------------------------
public Cursor loadInBackground() {
                // Will implement to load data

                // TODO (5) Query and load all task data in the background; sort by priority
                // [Hint] use a try/catch block to catch any errors in loading data
                try{
                    return getContentResolver().query(CONTENT_URI,
                            null,
                            null,
                            null,
                            COLUMN_PRIORITY);
                }catch (Exception e){
                    Log.e(TAG, "Fail;ed to get data");
                    e.printStackTrace();
                    return null;
                }
                
            }
 ------------------------------------------------------------------------------------------------------------------
 new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
            @Override
            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
                return false;
            }

            // Called when a user swipes left or right on a ViewHolder
            @Override
            public void onSwiped(RecyclerView.ViewHolder viewHolder, int swipeDir) {
                // Here is where you'll implement swipe to delete

                // TODO (1) Construct the URI for the item to delete
                int id = (int) viewHolder.itemView.getTag();
                //[Hint] Use getTag (from the adapter code) to get the id of the swiped item
                String sId = Integer.toString(id);
                Uri uri = CONTENT_URI;
                uri.buildUpon().appendPath(sId).build();
                // TODO (2) Delete a single row of data using a ContentResolver
                getContentResolver().delete(uri, null, null);
                // TODO (3) Restart the loader to re-query for all tasks after a deletion
                getSupportLoaderManager().restartLoader(TASK_LOADER_ID, null, MainActivity.this);
            }
        }).attachToRecyclerView(mRecyclerView);
